openapi: 3.0.3
info:
  title: Smart File Organizer API
  description: >-
    AI-powered file management system with semantic search, chat functionality,
    lesson generation, and content processing.


    ## Features

    - **File Management**: Upload, organize, and manage documents and videos

    - **AI-Powered Search**: Semantic similarity search using OpenAI embeddings

    - **Document Chat**: Conversational AI interface for documents with
    oversight agent

    - **Avatar Chat**: AI personas with access to file database

    - **Lesson Generation**: Multi-agent system for educational content creation

    - **Content Generation**: AI-powered content creation from existing files

    - **Hybrid Storage**: Optimized performance with database caching + cloud
    storage

    - **Automatic Processing**: Text extraction, video transcription, and
    metadata generation


    ## Authentication

    Currently uses a demo user system. For production use, implement proper
    authentication.


    ## Base URL

    Production: `https://smart-file-organiser.replit.app/api`

    Development: `http://localhost:5000/api`
  version: 2.0.0
  contact:
    name: API Support
    url: https://replit.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
servers:
  - url: https://smart-file-organiser.replit.app/api
    description: Production server
  - url: http://localhost:5000/api
    description: Development server
paths:
  /auth/user:
    get:
      tags:
        - Authentication
      summary: Get current user information
      description: Returns the current authenticated user's profile information (demo user)
      responses:
        '200':
          description: User information retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              example:
                id: demo-user
                email: demo@example.com
                firstName: Demo
                lastName: User
                profileImageUrl: null
  /files/upload-url:
    post:
      tags:
        - File Management
      summary: Get secure upload URL
      description: Generates a secure, signed URL for direct file upload to cloud storage
      responses:
        '200':
          description: Upload URL generated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  uploadURL:
                    type: string
                    format: uri
                    description: Signed URL for file upload
              example:
                uploadURL: https://storage.googleapis.com/bucket/signed-url
        '500':
          $ref: '#/components/responses/ServerError'
  /files:
    get:
      tags:
        - File Management
      summary: List all files
      description: >-
        Retrieves all files for the current user with metadata and processing
        status
      parameters:
        - name: limit
          in: query
          description: Maximum number of files to return
          schema:
            type: integer
            default: 50
            minimum: 1
            maximum: 100
        - name: offset
          in: query
          description: Number of files to skip for pagination
          schema:
            type: integer
            default: 0
            minimum: 0
      responses:
        '200':
          description: Files retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/File'
        '500':
          $ref: '#/components/responses/ServerError'
    post:
      tags:
        - File Management
      summary: Create file record
      description: Creates a file record after upload and starts background processing
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - filename
                - originalName
                - mimeType
                - size
                - uploadURL
              properties:
                filename:
                  type: string
                  description: System filename
                originalName:
                  type: string
                  description: Original filename
                mimeType:
                  type: string
                  description: MIME type of the file
                size:
                  type: integer
                  description: File size in bytes
                uploadURL:
                  type: string
                  description: Upload URL from cloud storage
                folderId:
                  type: string
                  nullable: true
                  description: Optional folder ID
      responses:
        '200':
          description: File record created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/File'
        '500':
          $ref: '#/components/responses/ServerError'
  /files/{id}:
    get:
      tags:
        - File Management
      summary: Get file details
      description: Retrieves a specific file with its metadata
      parameters:
        - name: id
          in: path
          required: true
          description: File ID
          schema:
            type: string
      responses:
        '200':
          description: File retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileWithMetadata'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    delete:
      tags:
        - File Management
      summary: Delete file
      description: Deletes a file from storage
      parameters:
        - name: id
          in: path
          required: true
          description: File ID
          schema:
            type: string
      responses:
        '200':
          description: File deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /files/{fileId}/data:
    get:
      tags:
        - File Management
      summary: Download file data
      description: >-
        Downloads file content from hybrid storage (BYTEA for â‰¤10MB, cloud for
        larger)
      parameters:
        - name: fileId
          in: path
          required: true
          description: File ID
          schema:
            type: string
      responses:
        '200':
          description: File data retrieved successfully
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /files/{fileId}/move:
    put:
      tags:
        - File Management
      summary: Move file to folder
      description: Moves a file to a different folder or root
      parameters:
        - name: fileId
          in: path
          required: true
          description: File ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                folderId:
                  type: string
                  nullable: true
                  description: Target folder ID (null for root)
      responses:
        '204':
          description: File moved successfully
        '500':
          $ref: '#/components/responses/ServerError'
  /files/category/{category}:
    get:
      tags:
        - File Management
      summary: Get files by category
      description: Retrieves files filtered by category
      parameters:
        - name: category
          in: path
          required: true
          description: Category name
          schema:
            type: string
        - name: limit
          in: query
          description: Maximum number of files
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: Files retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/File'
        '500':
          $ref: '#/components/responses/ServerError'
  /files/backfill-dual-storage:
    post:
      tags:
        - File Management
      summary: Backfill dual storage
      description: Backfills existing files to dual storage system (BYTEA + Cloud)
      responses:
        '200':
          description: Backfill completed
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  successful:
                    type: integer
                  failed:
                    type: integer
                  total:
                    type: integer
                  errors:
                    type: array
                    items:
                      type: string
        '500':
          $ref: '#/components/responses/ServerError'
  /folders:
    get:
      tags:
        - Folder Management
      summary: Get folders by parent
      description: Retrieves folders filtered by parent ID
      parameters:
        - name: parentId
          in: query
          description: Parent folder ID (null for root)
          schema:
            type: string
            nullable: true
      responses:
        '200':
          description: Folders retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Folder'
        '500':
          $ref: '#/components/responses/ServerError'
    post:
      tags:
        - Folder Management
      summary: Create folder
      description: Creates a new folder
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  type: string
                  minLength: 1
                parentId:
                  type: string
                  nullable: true
                color:
                  type: string
                description:
                  type: string
      responses:
        '201':
          description: Folder created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Folder'
        '500':
          $ref: '#/components/responses/ServerError'
  /folders/all:
    get:
      tags:
        - Folder Management
      summary: Get all folders
      description: Retrieves all folders for the user
      responses:
        '200':
          description: Folders retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Folder'
        '500':
          $ref: '#/components/responses/ServerError'
  /folders/{id}:
    put:
      tags:
        - Folder Management
      summary: Update folder
      description: Updates folder properties
      parameters:
        - name: id
          in: path
          required: true
          description: Folder ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  minLength: 1
                color:
                  type: string
                description:
                  type: string
      responses:
        '200':
          description: Folder updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Folder'
        '500':
          $ref: '#/components/responses/ServerError'
    delete:
      tags:
        - Folder Management
      summary: Delete folder
      description: Deletes a folder
      parameters:
        - name: id
          in: path
          required: true
          description: Folder ID
          schema:
            type: string
      responses:
        '204':
          description: Folder deleted successfully
        '500':
          $ref: '#/components/responses/ServerError'
  /folders/{id}/files:
    get:
      tags:
        - Folder Management
      summary: Get files in folder
      description: Retrieves all files in a specific folder
      parameters:
        - name: id
          in: path
          required: true
          description: Folder ID (use 'root' for root folder)
          schema:
            type: string
      responses:
        '200':
          description: Files retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/File'
        '500':
          $ref: '#/components/responses/ServerError'
  /search/{query}:
    get:
      tags:
        - Search
      summary: Search files
      description: >-
        Search files using semantic similarity or text search. Returns all files
        if query is empty (browse mode)
      parameters:
        - name: query
          in: path
          required: false
          description: Search query (optional)
          schema:
            type: string
      responses:
        '200':
          description: Search results retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FileWithSimilarity'
        '500':
          $ref: '#/components/responses/ServerError'
  /categories:
    get:
      tags:
        - Analytics
      summary: Get file categories
      description: Retrieves file categories with counts
      responses:
        '200':
          description: Categories retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    category:
                      type: string
                    count:
                      type: integer
        '500':
          $ref: '#/components/responses/ServerError'
  /stats:
    get:
      tags:
        - Analytics
      summary: Get file statistics
      description: Retrieves file statistics for the user
      responses:
        '200':
          description: Statistics retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  totalFiles:
                    type: integer
                  processedFiles:
                    type: integer
                  processingFiles:
                    type: integer
                  errorFiles:
                    type: integer
                  totalSize:
                    type: integer
                    description: Total size in bytes
        '500':
          $ref: '#/components/responses/ServerError'
  /generate-content:
    post:
      tags:
        - AI Features
      summary: Generate content from files
      description: Generates new content using AI based on existing files
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - prompt
                - fileIds
                - type
              properties:
                prompt:
                  type: string
                  description: Generation prompt
                fileIds:
                  type: array
                  items:
                    type: string
                  description: File IDs to use as context
                type:
                  type: string
                  description: Content type to generate
      responses:
        '200':
          description: Content generated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  content:
                    type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/ServerError'
  /chat:
    post:
      tags:
        - AI Features
      summary: Chat with files
      description: >-
        Chat with AI about your files with oversight agent for context
        management
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - message
              properties:
                message:
                  type: string
                  description: User message
                fileIds:
                  type: array
                  items:
                    type: string
                  description: File IDs for context
                chatHistory:
                  type: array
                  items:
                    type: object
                    properties:
                      role:
                        type: string
                      content:
                        type: string
                  description: Previous chat messages
                conversationContext:
                  type: object
                  description: Conversation context for oversight
      responses:
        '200':
          description: Chat response generated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    type: string
                  relatedFiles:
                    type: array
                    items:
                      type: string
                  conversationContext:
                    type: object
        '500':
          $ref: '#/components/responses/ServerError'
  /avatar-chat:
    post:
      tags:
        - AI Features
      summary: Avatar chat
      description: >-
        Chat with AI avatars that have personalities and database access with
        oversight agent
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - message
                - avatarId
                - personality
              properties:
                message:
                  type: string
                  description: User message
                avatarId:
                  type: string
                  description: Avatar identifier
                personality:
                  type: string
                  description: Avatar personality description
                chatHistory:
                  type: array
                  items:
                    type: object
                    properties:
                      role:
                        type: string
                      content:
                        type: string
                  description: Previous chat messages
                conversationContext:
                  type: object
                  description: Conversation context for oversight
      responses:
        '200':
          description: Avatar response generated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    type: string
                  searchResults:
                    type: array
                    items:
                      $ref: '#/components/schemas/File'
                  conversationContext:
                    type: object
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/ServerError'
  /generate-lesson-prompts:
    post:
      tags:
        - Lesson Generation
      summary: Generate lesson prompts
      description: >-
        Generates prompts for 5 specialized lesson creation agents based on
        selected files and folders
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                fileIds:
                  type: array
                  items:
                    type: string
                  description: File IDs to use as content source
                folderIds:
                  type: array
                  items:
                    type: string
                  description: Folder IDs to use as content source
                additionalContext:
                  type: string
                  description: Additional context or requirements for lesson generation
      responses:
        '200':
          description: Lesson prompts generated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  prompts:
                    type: object
                    properties:
                      introduction:
                        type: string
                        description: PowerPoint slides introduction prompt
                      warmup:
                        type: string
                        description: Flashcards warm-up prompt
                      content:
                        type: string
                        description: PowerPoint slides main content prompt
                      practice:
                        type: string
                        description: Quiz questions practice prompt
                      homework:
                        type: string
                        description: Quiz questions homework prompt
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/ServerError'
  /execute-lesson-prompt:
    post:
      tags:
        - Lesson Generation
      summary: Execute lesson prompt
      description: >-
        Executes an individual lesson prompt against the database to generate
        content
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - prompt
                - promptType
              properties:
                prompt:
                  type: string
                  description: The lesson prompt to execute
                promptType:
                  type: string
                  enum:
                    - introduction
                    - warmup
                    - content
                    - practice
                    - homework
                  description: Type of lesson prompt
                fileIds:
                  type: array
                  items:
                    type: string
                  description: File IDs for context
                folderIds:
                  type: array
                  items:
                    type: string
                  description: Folder IDs for context
      responses:
        '200':
          description: Lesson content generated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  content:
                    type: string
                    description: Generated lesson content in the appropriate format
        '500':
          $ref: '#/components/responses/ServerError'
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
        email:
          type: string
          format: email
        firstName:
          type: string
        lastName:
          type: string
        profileImageUrl:
          type: string
          nullable: true
    File:
      type: object
      properties:
        id:
          type: string
        filename:
          type: string
        originalName:
          type: string
        mimeType:
          type: string
        size:
          type: integer
        objectPath:
          type: string
        folderId:
          type: string
          nullable: true
        processingStatus:
          type: string
          enum:
            - pending
            - processing
            - completed
            - error
        processingError:
          type: string
          nullable: true
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        processedAt:
          type: string
          format: date-time
          nullable: true
    FileWithMetadata:
      allOf:
        - $ref: '#/components/schemas/File'
        - type: object
          properties:
            metadata:
              $ref: '#/components/schemas/FileMetadata'
    FileWithSimilarity:
      allOf:
        - $ref: '#/components/schemas/File'
        - type: object
          properties:
            similarity:
              type: number
              description: Similarity score (0-1)
    FileMetadata:
      type: object
      properties:
        id:
          type: string
        fileId:
          type: string
        summary:
          type: string
        keywords:
          type: array
          items:
            type: string
        topics:
          type: array
          items:
            type: string
        categories:
          type: array
          items:
            type: string
        extractedText:
          type: string
        confidence:
          type: number
        createdAt:
          type: string
          format: date-time
    Folder:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        path:
          type: string
        parentId:
          type: string
          nullable: true
        color:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
  responses:
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
    ServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
              details:
                type: string

